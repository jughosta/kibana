/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0 and the Server Side Public License, v 1; you may not use this file except
 * in compliance with, at your election, the Elastic License 2.0 or the Server
 * Side Public License, v 1.
 */

import type { DataView } from '@kbn/data-views-plugin/common';
import type { SearchHit } from '@elastic/elasticsearch/lib/api/typesWithBodyKey';
import { flattenHit } from '@kbn/data-service';
import { getDocId } from '../utils/get_doc_id';

export interface EsHitRecord extends Omit<SearchHit, '_source'> {
  _source?: Record<string, unknown>;
}

/**
 * This is the record/row of data provided to our Data Table
 */
export interface DataTableRecordSpec {
  /**
   * The document returned by Elasticsearch for search queries
   */
  raw: EsHitRecord;
  /**
   * Determines that the given doc is the anchor doc when rendering view surrounding docs
   */
  isAnchor?: boolean;
  /*
   * Data view
   */
  dataView?: DataView;
}

// let created = 0;
// let flattened = 0;

export class DataTableRecord {
  /**
   * A unique id generated by index, id and routing of a record
   */
  readonly id: string;
  /**
   * The document returned by Elasticsearch for search queries
   */
  readonly raw: EsHitRecord;
  /**
   * Determines that the given doc is the anchor doc when rendering view surrounding docs
   */
  readonly isAnchor?: boolean;

  #flattened: Record<string, unknown> | undefined;
  readonly #dataView: DataView | undefined;

  constructor(spec: DataTableRecordSpec) {
    this.id = getDocId(spec.raw);
    this.raw = spec.raw;
    this.isAnchor = spec.isAnchor;
    this.#dataView = spec.dataView;

    // console.log('created', ++created);
  }

  public get flattened() {
    if (!this.#flattened) {
      this.#flattened = flattenHit(this.raw, this.#dataView, { includeIgnoredValues: true });

      // console.log('flattened', ++flattened);
    }
    return this.#flattened;
  }
}
